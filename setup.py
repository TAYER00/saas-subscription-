#!/usr/bin/env python
"""
Script de configuration rapide pour SaaS Subscription Platform

Ce script automatise l'installation et la configuration initiale du projet.
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path


def run_command(command, description=""):
    """Ex√©cute une commande et affiche le r√©sultat."""
    if description:
        print(f"\nüîÑ {description}...")
    
    try:
        result = subprocess.run(
            command,
            shell=True,
            check=True,
            capture_output=True,
            text=True
        )
        print(f"‚úÖ {description or 'Commande'} r√©ussie")
        return result
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de {description or 'la commande'}: {e}")
        if e.stdout:
            print(f"Sortie: {e.stdout}")
        if e.stderr:
            print(f"Erreur: {e.stderr}")
        return None


def check_python_version():
    """V√©rifie la version de Python."""
    print("üîç V√©rification de la version Python...")
    
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ est requis")
        sys.exit(1)
    
    print(f"‚úÖ Python {sys.version.split()[0]} d√©tect√©")


def check_virtual_env():
    """V√©rifie si un environnement virtuel est activ√©."""
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚úÖ Environnement virtuel d√©tect√©")
        return True
    else:
        print("‚ö†Ô∏è  Aucun environnement virtuel d√©tect√©")
        response = input("Voulez-vous continuer sans environnement virtuel ? (y/N): ")
        return response.lower() == 'y'


def install_dependencies():
    """Installe les d√©pendances Python."""
    if not Path('requirements.txt').exists():
        print("‚ùå Fichier requirements.txt non trouv√©")
        return False
    
    return run_command(
        "pip install -r requirements.txt",
        "Installation des d√©pendances"
    ) is not None


def setup_environment():
    """Configure le fichier d'environnement."""
    env_file = Path('.env')
    env_example = Path('.env.example')
    
    if env_file.exists():
        print("‚úÖ Fichier .env d√©j√† existant")
        return True
    
    if env_example.exists():
        try:
            shutil.copy(env_example, env_file)
            print("‚úÖ Fichier .env cr√©√© √† partir de .env.example")
            print("‚ö†Ô∏è  N'oubliez pas de modifier les valeurs dans .env")
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation du fichier .env: {e}")
            return False
    else:
        print("‚ùå Fichier .env.example non trouv√©")
        return False


def run_migrations():
    """Ex√©cute les migrations Django."""
    commands = [
        ("python manage.py makemigrations", "Cr√©ation des migrations"),
        ("python manage.py migrate", "Application des migrations")
    ]
    
    for command, description in commands:
        if run_command(command, description) is None:
            return False
    
    return True


def initialize_data():
    """Initialise les donn√©es de base."""
    return run_command(
        "python manage.py init_roles",
        "Initialisation des r√¥les et permissions"
    ) is not None


def collect_static():
    """Collecte les fichiers statiques."""
    return run_command(
        "python manage.py collectstatic --noinput",
        "Collecte des fichiers statiques"
    ) is not None


def create_superuser():
    """Propose de cr√©er un superutilisateur."""
    response = input("\nVoulez-vous cr√©er un superutilisateur ? (y/N): ")
    if response.lower() == 'y':
        return run_command(
            "python manage.py createsuperuser",
            "Cr√©ation du superutilisateur"
        ) is not None
    return True


def display_success_message():
    """Affiche le message de succ√®s."""
    print("""
üéâ Configuration termin√©e avec succ√®s !

üìã Comptes de test disponibles :
   üë§ Admin: admin@saas.com / admin123
   üë§ Client: client@test.com / client123

üöÄ Pour d√©marrer le serveur :
   python manage.py runserver

üåê L'application sera accessible √† :
   http://127.0.0.1:8000

üìö Consultez le README.md pour plus d'informations.
""")


def main():
    """Fonction principale du script de configuration."""
    print("""
üöÄ Configuration de SaaS Subscription Platform
============================================
""")
    
    # V√©rifications pr√©liminaires
    check_python_version()
    
    if not check_virtual_env():
        print("‚ùå Configuration annul√©e")
        sys.exit(1)
    
    # Installation et configuration
    steps = [
        (install_dependencies, "Installation des d√©pendances"),
        (setup_environment, "Configuration de l'environnement"),
        (run_migrations, "Migrations de base de donn√©es"),
        (initialize_data, "Initialisation des donn√©es"),
        (collect_static, "Collecte des fichiers statiques"),
    ]
    
    for step_func, step_name in steps:
        print(f"\nüìã {step_name}")
        if not step_func():
            print(f"‚ùå √âchec lors de: {step_name}")
            sys.exit(1)
    
    # √âtapes optionnelles
    create_superuser()
    
    # Message de succ√®s
    display_success_message()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ùå Configuration interrompue par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        sys.exit(1)