#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script pour ex√©cuter tous les scrapers en parall√®le
Auteur: Assistant IA
Date: 2025
"""

import os
import sys
import subprocess
import threading
import time
from datetime import datetime

# Ajouter le r√©pertoire racine au path Python
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Liste des scrapers √† ex√©cuter
SCRAPERS = [
    "scrapers\\adm\\scraper.py",
    "scrapers\\cgi\\scraper.py", 
    "scrapers\\marchespublics\\scraper.py",
    "scrapers\\marsamaroc\\scraper.py",
    "scrapers\\offresonline\\scraper.py",
    "scrapers\\royalairmaroc\\scraper.py"
]

def run_scraper(scraper_path):
    """
    Ex√©cute un scraper individuel
    """
    scraper_name = os.path.basename(os.path.dirname(scraper_path))
    print(f"[{datetime.now().strftime('%H:%M:%S')}] D√©marrage du scraper: {scraper_name}")
    
    try:
        # Configurer l'environnement pour g√©rer l'encodage UTF-8
        env = os.environ.copy()
        env['PYTHONIOENCODING'] = 'utf-8'
        
        # Ex√©cuter le scraper
        result = subprocess.run(
            [sys.executable, scraper_path],
            capture_output=True,
            text=True,
            encoding='utf-8',
            errors='replace',
            env=env,
            cwd=os.path.dirname(os.path.abspath(__file__))
        )
        
        if result.returncode == 0:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚úÖ {scraper_name} termin√© avec succ√®s")
            if result.stdout:
                print(f"[{scraper_name}] Output: {result.stdout.strip()}")
        else:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚ùå {scraper_name} a √©chou√©")
            if result.stderr:
                print(f"[{scraper_name}] Erreur: {result.stderr.strip()}")
                
    except Exception as e:
        print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚ùå Erreur lors de l'ex√©cution de {scraper_name}: {str(e)}")

def main():
    """
    Fonction principale pour ex√©cuter tous les scrapers
    """
    print("="*60)
    print("üöÄ D√âMARRAGE DE TOUS LES SCRAPERS")
    print("="*60)
    print(f"Heure de d√©but: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Nombre de scrapers √† ex√©cuter: {len(SCRAPERS)}")
    print("="*60)
    
    # V√©rifier que tous les fichiers scrapers existent
    missing_scrapers = []
    for scraper in SCRAPERS:
        if not os.path.exists(scraper):
            missing_scrapers.append(scraper)
    
    if missing_scrapers:
        print("‚ö†Ô∏è  ATTENTION: Les scrapers suivants sont introuvables:")
        for scraper in missing_scrapers:
            print(f"   - {scraper}")
        print("")
    
    # Filtrer les scrapers existants
    existing_scrapers = [s for s in SCRAPERS if os.path.exists(s)]
    
    if not existing_scrapers:
        print("‚ùå Aucun scraper trouv√©. V√©rifiez les chemins.")
        return
    
    start_time = time.time()
    
    # Cr√©er et d√©marrer les threads pour chaque scraper
    threads = []
    for scraper in existing_scrapers:
        thread = threading.Thread(target=run_scraper, args=(scraper,))
        threads.append(thread)
        thread.start()
        # Petit d√©lai entre les d√©marrages pour √©viter la surcharge
        time.sleep(0.5)
    
    # Attendre que tous les threads se terminent
    for thread in threads:
        thread.join()
    
    end_time = time.time()
    duration = end_time - start_time
    
    print("="*60)
    print("üèÅ TOUS LES SCRAPERS TERMIN√âS")
    print("="*60)
    print(f"Heure de fin: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Dur√©e totale: {duration:.2f} secondes")
    print(f"Scrapers ex√©cut√©s: {len(existing_scrapers)}")
    print("="*60)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Interruption par l'utilisateur (Ctrl+C)")
        print("Arr√™t en cours...")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {str(e)}")
        sys.exit(1)